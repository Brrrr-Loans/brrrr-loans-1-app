-- Enable required extensions
create extension if not exists "uuid-ossp";

-- Add email verification fields to user_profile
alter table "public"."auth_user_profiles" add column if not exists "email_verified" boolean default false;
alter table "public"."auth_user_profiles" add column if not exists "email_verified_at" timestamptz;

-- Create user_clerk_sessions table
create table if not exists "public"."user_clerk_sessions" (
    "id" uuid default gen_random_uuid() primary key,
    "clerk_user_id" text not null references "public"."auth_user_profiles"("clerk_id"),
    "clerk_session_id" text not null unique,
    "clerk_session_status" text not null check (clerk_session_status in ('abandoned','active', 'ended', 'expired', 'removed', 'replaced', 'revoked')),
    "created_at" timestamptz default now() not null,
    "ended_at" timestamptz,
    "updated_at" timestamptz default now()
);

-- Create user_clerk_organizations table
create table if not exists "public"."auth_clerk_orgs" (
    "id" bigint generated by default as identity not null primary key,
    "clerk_organization_id" text not null unique,
    "clerk_organization_name" text not null,
    "clerk_organization_slug" text not null unique,
    "created_by_clerk_id" text not null references "public"."auth_user_profiles"("clerk_id"),
    "created_at" timestamptz default now() not null,
    "updated_at" timestamptz default now()
);

-- Create clerk_organization_members table
create table if not exists "public"."auth_clerk_orgs_members" (
  id bigint generated by default as identity not null,
  user_id bigint null,
  clerk_id text not null,
  clerk_organization_fkey bigint REFERENCES public.auth_clerk_orgs (id),
  clerk_role text not null check (clerk_role in ('admin', 'member')),
  created_at timestamp with time zone not null default now(),  
  constraint auth_clerk_orgs_members_pkey primary key (id),
  constraint auth_clerk_orgs_members_user_id_fkey foreign KEY (user_id) references auth_user_profiles (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

-- Enable RLS
alter table "public"."user_clerk_sessions" enable row level security;
alter table "public"."auth_clerk_orgs" enable row level security;
alter table "public"."auth_clerk_orgs_members" enable row level security;

-- Create policies
-- User sessions policies
create policy "Users can view their own sessions"
    on "public"."user_clerk_sessions"
    for select
    using (
        clerk_user_id = (
            select clerk_id from "public"."auth_user_profiles" 
            where clerk_id = auth.uid()::text
        )
    );

-- Organizations policies
create policy "Organization members can view organizations"
    on "public"."auth_clerk_orgs"
    for select
    to authenticated
    using (
        id in (
            select clerk_organization_fkey from public.auth_clerk_orgs_members
            where user_id = (
                select id from public.auth_user_profiles
                where clerk_id = auth.uid()::text
            )
        )
    );

create policy "Organization admins can insert organizations"
    on "public"."auth_clerk_orgs"
    for insert
    with check (created_by_clerk_id = auth.uid()::text);

create policy "Organization admins can update organizations"
    on "public"."auth_clerk_orgs"
    for update
    using (
        id in (
            select clerk_organization_fkey from public.auth_clerk_orgs_members
            where user_id = (
                select id from public.auth_user_profiles
                where clerk_id = auth.uid()::text
            ) and clerk_role = 'admin'
        )
    );

create policy "Organization admins can delete organizations"
    on "public"."auth_clerk_orgs"
    for delete
    using (
        id in (
            select clerk_organization_fkey from public.auth_clerk_orgs_members
            where user_id = (
                select id from public.auth_user_profiles
                where clerk_id = auth.uid()::text
            ) and clerk_role = 'admin'
        )
    );

-- Organization members policies
create policy "Organization members can view other members"
    on "public"."auth_clerk_orgs_members"
    for select
    using (
        clerk_organization_fkey in (
            select id from public.auth_clerk_orgs
            where id in (
                select clerk_organization_fkey from public.auth_clerk_orgs_members
                where user_id = (
                    select id from public.auth_user_profiles
                    where clerk_id = auth.uid()::text
                )
            )
        )
    );

create policy "Organization admins can insert members"
    on "public"."auth_clerk_orgs_members"
    for insert
    with check (
        clerk_organization_fkey in (
            select clerk_organization_fkey from public.auth_clerk_orgs_members
            where user_id = (
                select id from public.auth_user_profiles
                where clerk_id = auth.uid()::text
            ) and clerk_role = 'admin'
        )
    );

create policy "Organization admins can update members"
    on "public"."auth_clerk_orgs_members"
    for update
    using (
        clerk_organization_fkey in (
            select clerk_organization_fkey from public.auth_clerk_orgs_members
            where user_id = (
                select id from public.auth_user_profiles
                where clerk_id = auth.uid()::text
            ) and clerk_role = 'admin'
        )
    );

create policy "Organization admins can delete members"
    on "public"."auth_clerk_orgs_members"
    for delete
    using (
        clerk_organization_fkey in (
            select clerk_organization_fkey from public.auth_clerk_orgs_members
            where user_id = (
                select id from public.auth_user_profiles
                where clerk_id = auth.uid()::text
            ) and clerk_role = 'admin'
        )
    );

-- Service role policies
create policy "Service role can select sessions"
    on "public"."user_clerk_sessions"
    for select to service_role
    using (true);

create policy "Service role can insert sessions"
    on "public"."user_clerk_sessions"
    for insert to service_role
    with check (true);

create policy "Service role can update sessions"
    on "public"."user_clerk_sessions"
    for update to service_role
    using (true);

create policy "Service role can delete sessions"
    on "public"."user_clerk_sessions"
    for delete to service_role
    using (true);

create policy "Service role can select organizations"
    on "public"."auth_clerk_orgs"
    for select to service_role
    using (true);

create policy "Service role can insert organizations"
    on "public"."auth_clerk_orgs"
    for insert to service_role
    with check (true);

create policy "Service role can update organizations"
    on "public"."auth_clerk_orgs"
    for update to service_role
    using (true);

create policy "Service role can delete organizations"
    on "public"."auth_clerk_orgs"
    for delete to service_role
    using (true);

create policy "Service role can select members"
    on "public"."auth_clerk_orgs_members"
    for select to service_role
    using (true);

create policy "Service role can insert members"
    on "public"."auth_clerk_orgs_members"
    for insert to service_role
    with check (true);

create policy "Service role can update members"
    on "public"."auth_clerk_orgs_members"
    for update to service_role
    using (true);

create policy "Service role can delete members"
    on "public"."auth_clerk_orgs_members"
    for delete to service_role
    using (true);

-- Create indexes
create index if not exists "idx_user_clerk_sessions_clerk_user_id" on "public"."user_clerk_sessions" ("clerk_user_id");
create index if not exists "idx_auth_clerk_orgs_members_user_id" on "public"."auth_clerk_orgs_members" ("user_id");
create index if not exists "idx_auth_clerk_orgs_members_clerk_organization_fkey" on "public"."auth_clerk_orgs_members" ("clerk_organization_fkey");

-- Add clerk_organization_fkey column as a foreign key to auth_clerk_orgs(id)
ALTER TABLE public.auth_clerk_orgs_members
ADD COLUMN IF NOT EXISTS clerk_organization_fkey bigint REFERENCES public.auth_clerk_orgs(id);


-- Enforce NOT NULL constraint
ALTER TABLE public.auth_clerk_orgs_members
ALTER COLUMN clerk_organization_fkey SET NOT NULL;

-- Remove clerk_organization_id from auth_clerk_orgs_members
ALTER TABLE public.auth_clerk_orgs_members
DROP COLUMN IF EXISTS clerk_organization_id;

-- Add auth_user_profiles RLS policy that depends on auth_clerk_orgs_members
CREATE POLICY "Internal admins in org 6 or 7 can delete any user profile"
ON public.auth_user_profiles
FOR DELETE
TO authenticated
USING (
  role = 'admin'
  AND is_internal_yn = TRUE
  AND (
    EXISTS (
      SELECT 1
      FROM public.auth_clerk_orgs_members m
      WHERE m.user_id = public.auth_user_profiles.id
        AND m.clerk_organization_fkey IN (6, 7)
    )
  )
);